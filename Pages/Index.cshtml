@page
@model StromMediaPlatform.Pages.IndexModel
@inject Microsoft.Extensions.Configuration.IConfiguration config;
@{ }




<div class="container d-none" id="errorContainer">
    <div class="alert alert-danger m-4" role="alert"></div>
</div>


<div class="container my-5">
    <form method="post" enctype="multipart/form-data" id="videoForm">
        @Html.AntiForgeryToken()
        <div class="mb-3">
            <input class="form-control" type="file" asp-for="Upload" accept=".mp4">
        </div>
        <div class="d-grid gap-2 col-12 col-md-6 mx-auto">
            <button type="button" class="btn btn-success btn" onclick="start()" id="btnStart">UPLOAD</button>
        </div>
    </form>
</div>


<div class="container d-none" id="embed">
    <div class="text-center mt-4">
        <iframe src="@config["HostedVideoPage"]?video=@Model.VideoUrl" height="200" allowfullscreen></iframe>
    </div>
    <div class="my-4">
        <code>&lt;iframe</code> src="@config["HostedVideoPage"]?video=${videoUrl}" height="400" allowfullscreen<code>&gt;&lt;/iframe&gt;</code>
    </div>
</div>



<script>

    const input = document.getElementById('Upload');

    input.addEventListener("change", (e) => {

        const files = e.target.files;

        if (!files.length) {
            return;
        }


        document.getElementById("btnStart").disabled = false;


    }, false);


    document.getElementById("videoForm").addEventListener("submit", function (event) {
        event.preventDefault()
    });

    function showError(error) {
        var errorContainer = $("#errorContainer");

        errorContainer.find(".alert").html(error);
        errorContainer.removeClass("d-none");
    }

    function Upload(selectedFile) {
        let formData = new FormData(document.forms[0]);
        var xhr = new XMLHttpRequest();


        xhr.onreadystatechange = function () {
            if (this.readyState === 4 && this.status === 200) {
                console.log('Upload completed');
                const data = JSON.parse(this.response);

                if (data.hasOwnProperty("error")) {

                    showError(data.error);
                    resetUpload();
                    return;
                }

                if (data.hasOwnProperty("videoUrl")) {
                    showIFrameEmbed(data.videoUrl);
                    //setTimeout(function () { window.location.href = "/uploadresult?videourl=" + data.videoUrl; }, 1000);
                }
            }
        };
        xhr.upload.onprogress = () => {
            var percent = (event.loaded / event.total) * 100;
            var tt = Math.round(percent);
            console.log(tt);
            document.getElementById("btnStart").innerHTML = "UPLOADING... " + tt.toString() + "%";

        }
        xhr.onerror = () => {
            showError("Aax error!");
        };

        xhr.open('post', '', true);
        xhr.send(formData);
    };

    function clearError() {
        var errorContainer = $("#errorContainer");
        errorContainer.addClass("d-none");
    }
    function resetUpload() {
        var btn = $("#btnStart");
        btn.html("UPLOAD");

    }

    function showIFrameEmbed(videoUrl) {
        const output = `
    <div class="p-4 my-4">
        <code>&lt;iframe</code> src="@config["HostedVideoPage"]?video=${videoUrl}" height="400" allowfullscreen<code>&gt;&lt;/iframe&gt;</code>
    </div>`;

        $("#embed").removeClass("d-none");

    }


    function start() {
        const files = input.files;

        if (!files.length) {
            showError("Please choose a file first");
            return;
        }
        resetUpload();
        clearError();


        selectedFile = files[0];
        Upload(selectedFile);
    }

</script>
